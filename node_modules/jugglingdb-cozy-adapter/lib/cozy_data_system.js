// Generated by CoffeeScript 1.7.1
(function() {
  var Client, dataSystemHost, dataSystemPort, fs, getClient, util;

  Client = require("request-json").JsonClient;

  fs = require('fs');

  util = require('util');

  dataSystemHost = process.env.DATASYSTEM_HOST || 'localhost';

  dataSystemPort = process.env.DATASYSTEM_PORT || '9101';

  exports.initialize = function(schema, callback) {
    this.schema = schema;
    if (schema.settings.url == null) {
      schema.settings.url = "http://" + dataSystemHost + ":" + dataSystemPort + "/";
    }
    schema.adapter = new exports.CozyDataSystem(schema);
    return process.nextTick(callback);
  };

  exports.CozyDataSystem = (function() {
    function CozyDataSystem(schema) {
      this.schema = schema;
      this._models = {};
      this.client = new Client(schema.settings.url);
      if (process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test") {
        this.username = process.env.NAME;
        this.password = process.env.TOKEN;
      } else {
        this.username = Math.random().toString(36);
        this.password = "token";
      }
    }

    CozyDataSystem.prototype.define = function(descr) {
      this._models[descr.model.modelName] = descr;
      if ((this.username != null) && (this.password != null)) {
        this.client.setBasicAuth(this.username, this.password);
      }
      descr.model.createMany = (function(_this) {
        return function(dataList, callback) {
          return _this.createMany(descr.model.modelName, dataList, callback);
        };
      })(this);
      descr.model.search = (function(_this) {
        return function(options, callback) {
          return _this.search(descr.model.modelName, options, callback);
        };
      })(this);
      descr.model.defineRequest = (function(_this) {
        return function(name, map, callback) {
          return _this.defineRequest(descr.model.modelName, name, map, callback);
        };
      })(this);
      descr.model.request = (function(_this) {
        return function(name, params, callback) {
          return _this.request(descr.model.modelName, name, params, callback);
        };
      })(this);
      descr.model.rawRequest = (function(_this) {
        return function(name, params, callback) {
          return _this.rawRequest(descr.model.modelName, name, params, callback);
        };
      })(this);
      descr.model.removeRequest = (function(_this) {
        return function(name, callback) {
          return _this.removeRequest(descr.model.modelName, name, callback);
        };
      })(this);
      descr.model.requestDestroy = (function(_this) {
        return function(name, params, callback) {
          return _this.requestDestroy(descr.model.modelName, name, params, callback);
        };
      })(this);
      descr.model.all = (function(_this) {
        return function(params, callback) {
          return _this.all(descr.model.modelName, params, callback);
        };
      })(this);
      descr.model.destroyAll = (function(_this) {
        return function(params, callback) {
          return _this.destroyAll(descr.model.modelName, params, callback);
        };
      })(this);
      descr.model.applyRequest = (function(_this) {
        return function(params, callback) {
          return _this.applyRequest(descr.model.modelName, params, callback);
        };
      })(this);
      descr.model._forDB = (function(_this) {
        return function(data) {
          return _this._forDB(descr.model.modelName, data);
        };
      })(this);
      descr.model.prototype.index = function(fields, callback) {
        return this._adapter().index(this, fields, descr.properties, callback);
      };
      descr.model.prototype.attachFile = function(path, data, callback) {
        return this._adapter().attachFile(this, path, data, callback);
      };
      descr.model.prototype.getFile = function(path, callback) {
        return this._adapter().getFile(this, path, callback);
      };
      descr.model.prototype.saveFile = function(path, filePath, callback) {
        return this._adapter().saveFile(this, path, filePath, callback);
      };
      descr.model.prototype.removeFile = function(path, callback) {
        return this._adapter().removeFile(this, path, callback);
      };
      descr.model.prototype.attachBinary = function(path, data, callback) {
        return this._adapter().attachBinary(this, path, data, callback);
      };
      descr.model.prototype.getBinary = function(path, callback) {
        return this._adapter().getBinary(this, path, callback);
      };
      descr.model.prototype.saveBinary = function(path, filePath, callback) {
        return this._adapter().saveBinary(this, path, filePath, callback);
      };
      descr.model.prototype.removeBinary = function(path, callback) {
        return this._adapter().removeBinary(this, path, callback);
      };
      return descr.model.prototype.convertBinary = function(callback) {
        return this._adapter().convertBinary(this, callback);
      };
    };

    CozyDataSystem.prototype.exists = function(model, id, callback) {
      return this.client.get("data/exist/" + id + "/", (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error);
          } else if ((body == null) || (body.exist == null)) {
            return callback(new Error("Data system returned invalid data."));
          } else {
            return callback(null, body.exist);
          }
        };
      })(this));
    };

    CozyDataSystem.prototype.find = function(model, id, callback) {
      return this.client.get("data/" + id + "/", (function(_this) {
        return function(error, response, body) {
          var err;
          if (error) {
            return callback(error);
          } else if (response.statusCode === 404) {
            return callback(null, null);
          } else if (response.statusCode !== 200) {
            try {
              return callback(new Error("Data system failed " + JSON.stringify(body)));
            } catch (_error) {
              err = _error;
              return callback(new Error("Data system failed"));
            }
          } else if (body.docType.toLowerCase() !== model.toLowerCase()) {
            return callback(null, null);
          } else {
            return callback(null, new _this._models[model].model(body));
          }
        };
      })(this));
    };

    CozyDataSystem.prototype.create = function(model, data, callback) {
      var path;
      path = "data/";
      if (data.id != null) {
        path += "" + data.id + "/";
        delete data.id;
      }
      data.docType = model;
      return this.client.post(path, data, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 409) {
          return callback(new Error("This document already exists"));
        } else if (response.statusCode !== 201) {
          return callback(new Error("Server error occured."));
        } else {
          return callback(null, body._id);
        }
      });
    };

    CozyDataSystem.prototype.createMany = function(model, dataList, callback) {
      var ids, recCreate;
      ids = [];
      return (recCreate = (function(_this) {
        return function() {
          var data;
          if (dataList.length === 0) {
            return callback(null, ids.reverse());
          } else {
            data = dataList.pop();
            return _this.create(model, data, function(err, id) {
              if (err) {
                return callback(err);
              } else {
                ids.push(id);
                return recCreate();
              }
            });
          }
        };
      })(this))();
    };

    CozyDataSystem.prototype.save = function(model, data, callback) {
      data.docType = model;
      return this.client.put("data/" + data.id + "/", data, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(new Error("Document not found"));
        } else if (response.statusCode !== 200) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    };

    CozyDataSystem.prototype.updateAttributes = function(model, id, data, callback) {
      return this.client.put("data/merge/" + id + "/", data, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(new Error("Document not found"));
        } else if (response.statusCode !== 200) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    };

    CozyDataSystem.prototype.updateOrCreate = function(model, data, callback) {
      data.docType = model;
      return this.client.put("data/upsert/" + data.id + "/", data, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode !== 200 && response.statusCode !== 201) {
          return callback(new Error("Server error occured."));
        } else if (response.statusCode === 200) {
          return callback(null);
        } else if (response.statusCode === 201) {
          return callback(null, body._id);
        }
      });
    };

    CozyDataSystem.prototype.destroy = function(model, id, callback) {
      return this.client.del("data/" + id + "/", function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(new Error("Document not found"));
        } else if (response.statusCode !== 204) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    };

    CozyDataSystem.prototype.index = function(model, fields, properties, callback) {
      var data, field, fieldType, fieldsType, getFieldType, getMappedValue, mappedValue, mappedValues, property, typeRegex, _i, _len;
      typeRegex = /function ([\w]+).*/i;
      getFieldType = function(property) {
        var rawType, type;
        if (property.type != null) {
          if (property.indexerType != null) {
            return property.indexerType;
          } else {
            rawType = property.type.toString();
            type = typeRegex.exec(rawType);
            if (type != null) {
              type = type[1];
              type = type.toLowerCase();
              return type;
            }
          }
        }
      };
      getMappedValue = function(property, field) {
        if ((property.indexerMap != null) && property.indexerMap instanceof Function) {
          return property.indexerMap(model[field]);
        }
      };
      fieldsType = {};
      mappedValues = {};
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        property = properties[field];
        if ((fieldType = getFieldType(property)) != null) {
          fieldsType[field] = fieldType;
        }
        if ((mappedValue = getMappedValue(property, field)) != null) {
          mappedValues[field] = mappedValue;
        }
      }
      data = {
        fields: fields,
        fieldsType: fieldsType,
        mappedValues: mappedValues
      };
      return this.client.post("data/index/" + model.id, data, (function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode !== 200) {
          return callback(new Error(util.inspect(body)));
        } else {
          return callback(null);
        }
      }), false);
    };

    CozyDataSystem.prototype.search = function(model, options, callback) {
      var data, numByPage, numPage, query, showNumResults;
      if (typeof options === "string") {
        query = options;
        numPage = 1;
        numByPage = 10;
        showNumResults = false;
      } else {
        query = options.query;
        numPage = options.numPage || 1;
        numByPage = options.numByPage || 10;
        showNumResults = true;
      }
      data = {
        query: query,
        numPage: numPage,
        numByPage: numByPage,
        showNumResults: showNumResults
      };
      return this.client.post("data/search/" + (model.toLowerCase()), data, (function(_this) {
        return function(error, response, body) {
          var doc, numResults, results, _i, _len, _ref;
          if (error) {
            return callback(error);
          } else if (response.statusCode !== 200) {
            return callback(new Error(util.inspect(body)));
          } else {
            numResults = body.numResults;
            results = [];
            _ref = body.rows;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              doc = _ref[_i];
              results.push(new _this._models[model].model(doc));
              if (doc._id != null) {
                doc.id = doc._id;
              }
            }
            if (numResults != null) {
              return callback(null, {
                results: results,
                numResults: numResults
              });
            } else {
              return callback(null, results);
            }
          }
        };
      })(this));
    };

    CozyDataSystem.prototype.attachFile = function(model, path, data, callback) {
      var urlPath;
      if (typeof data === "function") {
        callback = data;
        data = null;
      }
      urlPath = "data/" + model.id + "/attachments/";
      return this.client.sendFile(urlPath, path, data, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 201, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.getFile = function(model, path, callback) {
      var urlPath;
      urlPath = "data/" + model.id + "/attachments/" + path;
      return this.client.get(urlPath, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 200, callback);
        };
      })(this), false);
    };

    CozyDataSystem.prototype.saveFile = function(model, path, filePath, callback) {
      var urlPath;
      urlPath = "data/" + model.id + "/attachments/" + path;
      return this.client.saveFile(urlPath, filePath, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 200, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.removeFile = function(model, path, callback) {
      var urlPath;
      urlPath = "data/" + model.id + "/attachments/" + path;
      return this.client.del(urlPath, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 204, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.attachBinary = function(model, path, data, callback) {
      var urlPath;
      if (typeof data === "function") {
        callback = data;
        data = null;
      }
      urlPath = "data/" + model.id + "/binaries/";
      return this.client.sendFile(urlPath, path, data, (function(_this) {
        return function(error, response, body) {
          try {
            body = JSON.parse(body);
          } catch (_error) {}
          return _this.checkError(error, response, body, 201, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.getBinary = function(model, path, callback) {
      var urlPath;
      urlPath = "data/" + model.id + "/binaries/" + path;
      return this.client.get(urlPath, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 200, callback);
        };
      })(this), false);
    };

    CozyDataSystem.prototype.saveBinary = function(model, path, filePath, callback) {
      var urlPath;
      urlPath = "data/" + model.id + "/binaries/" + path;
      return this.client.saveFile(urlPath, filePath, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 200, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.removeBinary = function(model, path, callback) {
      var urlPath;
      urlPath = "data/" + model.id + "/binaries/" + path;
      return this.client.del(urlPath, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 204, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.convertBinary = function(model, callback) {
      return this.client.get("data/" + model.id + "/binaries/convert", function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(new Error("Document not found"));
        } else if (response.statusCode !== 200) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    };

    CozyDataSystem.prototype.checkError = function(error, response, body, code, callback) {
      var msg, msgStatus;
      if (error) {
        return callback(error);
      } else if (response.statusCode !== code) {
        msgStatus = "expected: " + code + ", got: " + response.statusCode;
        msg = "" + msgStatus + " -- " + body.error;
        return callback(new Error(msg));
      } else {
        return callback(null);
      }
    };

    CozyDataSystem.prototype.defineRequest = function(model, name, request, callback) {
      var map, path, reduce, view;
      if (typeof request === "function") {
        map = request;
      } else {
        map = request.map;
        reduce = request.reduce.toString();
      }
      view = {
        reduce: reduce,
        map: "function (doc) {\n  if (doc.docType.toLowerCase() === \"" + (model.toLowerCase()) + "\") {\n    filter = " + (map.toString()) + ";\n    filter(doc);\n  }\n}"
      };
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/";
      return this.client.put(path, view, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 200, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.request = function(model, name, params, callback) {
      var path;
      if (typeof params === "function") {
        callback = params;
      }
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/";
      return this.client.post(path, params, (function(_this) {
        return function(error, response, body) {
          var doc, results, _i, _len;
          if (error) {
            return callback(error);
          } else if (response.statusCode !== 200) {
            return callback(new Error(util.inspect(body)));
          } else {
            results = [];
            for (_i = 0, _len = body.length; _i < _len; _i++) {
              doc = body[_i];
              doc.value.id = doc.value._id;
              results.push(new _this._models[model].model(doc.value));
            }
            return callback(null, results);
          }
        };
      })(this));
    };

    CozyDataSystem.prototype.rawRequest = function(model, name, params, callback) {
      var path;
      if (typeof params === "function") {
        callback = params;
      }
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/";
      return this.client.post(path, params, (function(_this) {
        return function(error, response, body) {
          if (error) {
            return callback(error);
          } else if (response.statusCode !== 200) {
            return callback(new Error(util.inspect(body)));
          } else {
            return callback(null, body);
          }
        };
      })(this));
    };

    CozyDataSystem.prototype.removeRequest = function(model, name, callback) {
      var path;
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/";
      return this.client.del(path, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 204, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.requestDestroy = function(model, name, params, callback) {
      var path;
      if (typeof params === "function") {
        callback = params;
      }
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/destroy/";
      return this.client.put(path, params, (function(_this) {
        return function(error, response, body) {
          return _this.checkError(error, response, body, 204, callback);
        };
      })(this));
    };

    CozyDataSystem.prototype.all = function(model, params, callback) {
      var view;
      view = "all";
      if ((params != null ? params.view : void 0) != null) {
        view = params.view;
        delete params.view;
      }
      return this.request(model, view, params, callback);
    };

    CozyDataSystem.prototype.destroyAll = function(model, params, callback) {
      var view;
      view = "all";
      if ((params != null ? params.view : void 0) != null) {
        view = params.view;
        delete params.view;
      }
      return this.requestDestroy(model, view, params, callback);
    };

    CozyDataSystem.prototype._forDB = function(model, data) {
      var res;
      res = {};
      Object.keys(data).forEach((function(_this) {
        return function(propName) {
          if (_this.whatTypeName(model, propName) === 'JSON') {
            return res[propName] = JSON.stringify(data[propName]);
          } else {
            return res[propName] = data[propName];
          }
        };
      })(this));
      return res;
    };

    CozyDataSystem.prototype.whatTypeName = function(model, propName) {
      var ds;
      ds = this.schema.definitions[model];
      return ds.properties[propName] && ds.properties[propName].type.name;
    };

    return CozyDataSystem;

  })();

  getClient = function(callback) {
    var client;
    client = new Client("http://localhost:9101/");
    if (process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test") {
      this.username = process.env.NAME;
      this.password = process.env.TOKEN;
    } else {
      this.username = Math.random().toString(36);
      this.password = "token";
    }
    client.setBasicAuth(this.username, this.password);
    return callback(client);
  };

  exports.sendMail = function(data, callback) {
    return getClient((function(_this) {
      return function(client) {
        var path;
        path = "mail/";
        return client.post(path, data, function(error, response, body) {
          if (body.error) {
            return callback(body.error);
          } else if (response.statusCode === 400) {
            return callback(new Error('Body has not all necessary attributes'));
          } else if (response.statusCode === 500) {
            return callback(new Error("Server error occured."));
          } else {
            return callback();
          }
        });
      };
    })(this));
  };

  exports.sendMailToUser = function(data, callback) {
    return getClient((function(_this) {
      return function(client) {
        var path;
        path = "mail/to-user/";
        return client.post(path, data, function(error, response, body) {
          if (body.error) {
            return callback(body.error);
          } else if (response.statusCode === 400) {
            return callback(new Error('Body has not all necessary attributes'));
          } else if (response.statusCode === 500) {
            return callback(new Error("Server error occured."));
          } else {
            return callback();
          }
        });
      };
    })(this));
  };

  exports.sendMailFromUser = function(data, callback) {
    return getClient((function(_this) {
      return function(client) {
        var path;
        path = "mail/from-user/";
        return client.post(path, data, function(error, response, body) {
          if (body.error != null) {
            return callback(body.error);
          } else if (response.statusCode === 400) {
            return callback(new Error('Body has not all necessary attributes'));
          } else if (response.statusCode === 500) {
            return callback(new Error("Server error occured."));
          } else {
            return callback();
          }
        });
      };
    })(this));
  };

  exports.commonRequests = {
    checkError: function(err) {
      if (err) {
        return console.log("An error occured while creating request");
      }
    },
    all: function() {
      return emit(doc._id, doc);
    },
    allType: function() {
      return emit(doc.type, doc);
    },
    allSlug: function() {
      return emit(doc.slug, doc);
    }
  };

}).call(this);
