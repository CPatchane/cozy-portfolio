//-Bootstrap links and main style
script( src='//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js' )
script( src='//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js' )
link(href="//maxcdn.bootstrapcdn.com/bootswatch/3.3.0/flatly/bootstrap.min.css", rel="stylesheet")
style
  include main.css
  
div.container
  div.col-md-2.leftMenu
    div.sidebar-nav
      div.navbar.navbar-default(role='navigation')
        div.navbar-header
          button.navbar-toggle(type='button', data-toggle='collapse', data-target = '.sidebar-navbar-collapse')
            span.sr-only Toggle navigation
            span.icon-bar
            span.icon-bar
            span.icon-bar
          span.visible-xs.navbar-brand Menu
        div.navbar-collapse.collapse.sidebar-navbar-collapse
          ul.nav.navbar-nav
            li
              a(href='#') Mon profil
            li
              a(href='/public/portfolio' target="_blank") Voir mon Portfolio
            li.active
              a(href='#choices') Mes choix
            li
              a(href='#accountSettings') Paramètres
  div.col-md-10.choicesContainer#choicesContainer
    div.row#TabsContainer
      div.row.text-center
        h1.col-md-12 Mes choix
      //-div.row.tab
        a.tabTitle.col-md-12(onclick="chooseCategory(this);") Aperçu
        div.docsContainer.col-md-12
      //- It will contain all categories tabs dynamically here
    div.row#submitPart
      div.col-md-12.submitButton.text-center
        button.btn.btn-primary#submitChanges(onclick="submitChanges()") Valider mes choix
        button.btn.btn-warning#syncDYBDocumentsButton(type="button", onclick="syncDYBDocuments()") Synchroniser mes documents DoYouBuzz
        div.alert.alert-success#savedMessage(hidden="true")
        div.alert.alert-danger#errorMessage(hidden="true")
    div.row#addDocumentPart
      div.row.text-left
        h3.col-md-12 Ajouter un document
      div.documentBlock.col-md-9#addDocumentBlock(style="display:none")
        div.documentContent.col-md-12#addDocumentContent
          div.row
            label Titre<span class="mandatoryStar">*</span> :
            input#title(type="text", placeholder="Titre du document" name="title")
          div.row
            label URL :
            input#url(type="text", placeholder="Url de votre document" name="url")
          div.row
            label Site web associé :
            input#relatedWebsite(type="text", placeholder="www.mywebsite.fr" name="relatedWebsite")
          div.row
            label Catégorie<span class="mandatoryStar">*</span> :
            input#category(type="text", placeholder="Sa catégorie" name="category")
          div.row
            label Date de réalisation<span class="mandatoryStar">*</span> :
            input#creationDate(type="text", placeholder="jj/mm/aaaa" name="creationDate" maxlength="10")
          div.row
            label Description<span class="mandatoryStar">*</span> :
            textarea#description(style="resize:none;width:60%;height:100px;", placeholder="Description du document..." name="description")
          div.row.text-center
            button.btn.btn-primary#addDocumentButton(onclick="addDocument()") Ajouter ce document
            button.btn.btn-secondary#cancelButton(onclick="showAddDocumentForm(false)") Cacher
          div.row.alert.alert-danger#errorMessageAddDocument(style="margin-top:5px;", hidden="true")
      div.documentBlock.col-md-3#placeHolderAddDocumentBlock(onclick="showAddDocumentForm(true)")
        div.documentContent.col-md-12#placeHolderAddDocumentContent
          button#addButton +
        
      
script(type="text/javascript").
  /** Global variables **/
  var groups = {};
  var documents = [];
  //we store in this next object all categories already built (or reserved) to avoid duplicates
  var categoriesAlreadyBuilt = {"Présentation" : true, "Badges" : true}; //ex categoriesAlreadyBuilt["Vidéos"] = true;
  var documentsAlreadyBuilt = {};
  var isADocumentInEditingMode = false;
  
  /** initialisation **/
  init(true,false,false); //first running so this is not an update
  
  
  /***********************/
  /** General functions **/
  /***********************/
  
  //functon run on page loading
  function init(isFirstRunning, isDocumentsUpdate, isBadgeUpdate){
    //get all documents from database and build them on the page
    if(isFirstRunning || isDocumentsUpdate)getAndBuildDocuments(isDocumentsUpdate);
    
    //get all badges from database and build them on page
    if(isFirstRunning || isBadgeUpdate)getAndBuildBadges(isBadgeUpdate);
  }
  
  //functon for choising category behavior
  function chooseCategory(element){
    if(element.parentNode.className == "row tab choiceCategory"){
      element.parentNode.className = "row tab";
      return;
    }
    var categoriesDIV = document.getElementById("choicesContainer").getElementsByClassName("tab");
    for(var i in categoriesDIV){
      categoriesDIV[i].className = "row tab";
    }
    element.parentNode.className = "row tab choiceCategory";
  }
  
  //function to submit user changes
  function submitChanges(){
    /**submit document visibilities**/
    var documentInputs = document.getElementsByClassName("documentVisibility");
    var documentsToSubmit = {};
    for(var i=0; i<documentInputs.length; i++){
      documentsToSubmit[documentInputs[i].getAttribute("documentID")] = documentInputs[i].checked;
    }
    var xmlHttpUpdateDocuments = new XMLHttpRequest();
    xmlHttpUpdateDocuments.open( "PUT", "updateDocumentsVisibilities", false ); // false for synchronous request
    xmlHttpUpdateDocuments.setRequestHeader("Content-type", "application/json");
    xmlHttpUpdateDocuments.send( JSON.stringify(documentsToSubmit) );
    
    /**submit badges visibilities**/
    var badgesInputs = document.getElementsByClassName("badgeVisibility");
    var badgesToSubmit = {};
    for(var i=0; i<badgesInputs.length; i++){
      badgesToSubmit[badgesInputs[i].getAttribute("badge")] = badgesInputs[i].checked;
    }
    var xmlHttpUpdate = new XMLHttpRequest();
    xmlHttpUpdate.open( "PUT", "updateBadgesVisibilities", false ); // false for synchronous request
    xmlHttpUpdate.setRequestHeader("Content-type", "application/json");
    xmlHttpUpdate.send( JSON.stringify(badgesToSubmit) );
  }
  
  
  /**********************/
  /** Badges functions **/
  /**********************/
  
  //function to get all badges from database and build them on the html page
  function getAndBuildBadges(isUpdate){
    //get all badges from database and build them on page
    var xmlHttpGroups = new XMLHttpRequest();
    xmlHttpGroups.open( "GET", "getBadgesGroup", false ); // false for synchronous request
    xmlHttpGroups.send( null );
    groups = JSON.parse(xmlHttpGroups.responseText);
    //console.log(groups);
    
    if(groups.length == 0) return; //if no badges returned, we stop here
    if(isUpdate){
      document.getElementById("badgesTabContent").innerHTML = "";
    }else{
      var badgesTabHTML = '<div class="row tab" id="badgesTab">' +
                            '<a class="tabTitle col-md-12" onclick="chooseCategory(this);">Badges</a>' +
                            '<div class="docsContainer col-md-12" id="badgesTabContent"></div>' +
                            '<button class="btn btn-primary" id="syncOBbutton" onclick="syncObenBadgesBackPack()">Récupérer de mon BackPack (OpenBadges)</button>' +
                        '</div>';
      document.getElementById("TabsContainer").innerHTML += badgesTabHTML;
    }
    var badges = {};
    groups.forEach(function(group, group_index, array){
      badges = group.badges;
      badges.forEach(function(badge, badge_index, array){
        buildBadge(badge.name, badge.imageUrl, badge.issuerName, badge.issuerUrl, badge.issuedOn, badge.description, badge.criteria, badge.visible, group_index+"_"+badge_index); 
      });
    });
  }
  
    
  //function to build each badge on page
  function buildBadge(badgeName, imageUrl, issuerName, issuerUrl, issueDate, description, hostedUrl, visibility, index){
    //id for the badge visibility input
    var badgeId = "badge_"+index;
    //get visibility parameter
    var checked = visibility ? "checked" : "";
    //badge html building
    var container = 
        '<div class="badgeBlock col-md-6">' +
          '<div class="badgeContent col-md-12">' +
            '<img class="badgeImage" src="' + imageUrl + '"/>'+
            '<div class="badgeDetails">' +
              '<input id="'+ badgeId +'" badge="' + badgeName + '" class="visibilityCheckBox badgeVisibility" type="checkbox" name="' + badgeId + '" '+ checked +' />' +
              '<label for="' + badgeId + '"></label>' +
              '<p class="badgeIssuer"> <span class="badgeName">' + badgeName + '</span>' +
                ', délivré par <a href="' + issuerUrl + '">' + issuerName + '</a>, le ' + issueDate + '' +
              '</p>' +
              '<p class="badgeDescription">' + description + '</p>' +
              '<a class="badgeLink" target="_blank" href="' + hostedUrl + '">Voir sur le site d\'origine ></a>' +
            '</div>' +
          '</div>' +
        '</div>';
      
      //add to badges tab
      document.getElementById("badgesTabContent").innerHTML += container;
  }
  
  
  //function to sync badges with OpenBadges BackPack
  function syncObenBadgesBackPack(){
    if(confirm("Attention : les paramètres de visibilité de vos badges seront désactivés, il vous faudra les rechoisir, voulez-vous continuez?")){
        var xmlHttpSync = new XMLHttpRequest();
        xmlHttpSync.open( "GET", "syncBadgesGroup", true ); // true for asynchronous request
        xmlHttpSync.onreadystatechange = function(){
          if (xmlHttpSync.readyState == 4 && xmlHttpSync.status == 200) {
            init(false, false, true); //badges updates but not document update
          }
        }
        xmlHttpSync.send();
    }
  }
  
  
  /*************************/
  /** Documents functions **/
  /*************************/
  
  //add a new document from the form
  function addDocument(){
    document.getElementById("errorMessageAddDocument").setAttribute("hidden", true);
    var title = document.getElementById("title");
    var url = document.getElementById("url");
    var relatedWebsite = document.getElementById("relatedWebsite");
    var category = document.getElementById("category");
    var creationDate = document.getElementById("creationDate");
    var description = document.getElementById("description");
    var errorMessage = document.getElementById("errorMessageAddDocument");
    var dateRegex = /^(0[1-9]|[12][0-9]|3[01])[/](0[1-9]|1[012])[/]\d{4}$/;
    var cssIDRegex = /^[A-Za-z]+[A-Za-zÀ-ÿ0-9_\-\:\. ]*$/; //we will use the category as css id after, so we valid it now (we will replace spaces after)
    var urlRegex = /(http(s)?:\/\/.)(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/;
    //check all mandatory inputs
    if(title.value == ""){
      errorMessage.innerHTML = "Veuillez ajouter un titre.";
      document.getElementById("errorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(category.value == "" || !category.value.match(cssIDRegex)){
      errorMessage.innerHTML = 'Veuillez assigner une catégorie correcte. (Doit commencé par une lettre et peut contenir uniquement : des lettres, des chiffres, des espaces, "-", "_", ":" et ".")';
      document.getElementById("errorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(category.value == "Badges" || category.value == "Présentation"){
      errorMessage.innerHTML = 'Les catégories "Badges" et "Aperçu" ne peuvent pas être utilisées. Veuillez modifier.';
      document.getElementById("errorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(creationDate.value == "" || !creationDate.value.match(dateRegex)){
      errorMessage.innerHTML = "Veuillez ajouter une date correcte (format : JJ/MM/AAAA).";
      document.getElementById("errorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(description.value == ""){
      errorMessage.innerHTML = "Veuillez ajouter une description.";
      document.getElementById("errorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(url.value != "" && !url.value.match(urlRegex)){
      errorMessage.innerHTML = 'L\'adresse URL du document est incorrecte (peut être avez-vous oublier "http://" ou "https://" ?)';
      document.getElementById("errorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(relatedWebsite.value != "" && !relatedWebsite.value.match(urlRegex)){
      errorMessage.innerHTML = 'L\'adresse URL du site web associé est incorrecte (peut être avez-vous oublier "http://" ou "https://" ?)';
      document.getElementById("errorMessageAddDocument").removeAttribute("hidden");
      return;
    }
      
    var dataToAdd = {
      "title" : title.value,
      "url" : url.value,
      "relatedWebsite" : relatedWebsite.value,
      "category" : category.value,
      "creationDate" : creationDate.value,
      "description" : description.value
    };
    //sent to server to be added
    document.getElementById("savedMessage").setAttribute("hidden", true);
    document.getElementById("errorMessage").setAttribute("hidden", true);
    var xmlHttpAddDocument = new XMLHttpRequest();
    xmlHttpAddDocument.open( "POST", "addPortfolioDocument", true );
    xmlHttpAddDocument.setRequestHeader("Content-type", "application/json");
    xmlHttpAddDocument.onreadystatechange = function(){
          if (xmlHttpAddDocument.readyState == 4 && xmlHttpAddDocument.status == 200) {
            //reset the form
            title.value = "";
            url.value = "";
            relatedWebsite.value = "";
            category.value = "";
            creationDate.value = "";
            description.value = "";
            showAddDocumentForm(false);
            init(false, true, false);//documents update
            document.getElementById("savedMessage").innerHTML = xmlHttpAddDocument.responseText;
            document.getElementById("savedMessage").removeAttribute("hidden");
          }
          if (xmlHttpAddDocument.readyState == 4 && xmlHttpAddDocument.status == 500) {
            document.getElementById("errorMessage").innerHTML = xmlHttpAddDocument.responseText;
            document.getElementById("errorMessage").removeAttribute("hidden");
          }
        }
    xmlHttpAddDocument.send(JSON.stringify(dataToAdd));
  }
  
  function showAddDocumentForm(showFormAction){
    if(showFormAction){
      document.getElementById("placeHolderAddDocumentBlock").setAttribute("style", "display:none");
      document.getElementById("addDocumentBlock").removeAttribute("style");
      window.scrollTo(0,document.body.scrollHeight);
    }else{
      document.getElementById("addDocumentBlock").setAttribute("style", "display:none");
      document.getElementById("placeHolderAddDocumentBlock").removeAttribute("style");
      window.scrollTo(0);
    }
  }
  
  //get all documents from database and build them on the page
  function getAndBuildDocuments(isUpdate){
    var xmlHttpDocuments = new XMLHttpRequest();
    xmlHttpDocuments.open( "GET", "getPortfolioDocuments", false ); // false for synchronous request
    xmlHttpDocuments.send( null );
    documents = JSON.parse(xmlHttpDocuments.responseText);
    console.log(documents);
    
    if(documents.length == 0) return;
    var documentID = "";
    documents.forEach(function(myDocument, index, array){
      if(!categoriesAlreadyBuilt[myDocument.category]){ //new category
        categoriesAlreadyBuilt[myDocument.category] = true;
        var HTMLToBuild = '<div class="row tab">' +
                            '<a class="tabTitle col-md-12" onclick="chooseCategory(this);">' + myDocument.category + '</a>' +
                            '<div class="docsContainer col-md-12" id="'+ myDocument.category.replace(" ", "_") +'"></div>' +
                          '</div>';
        document.getElementById("TabsContainer").innerHTML += HTMLToBuild;
      }
      if(!documentsAlreadyBuilt[myDocument.id]){ //new document
        documentsAlreadyBuilt[myDocument.id] = true;
        buildDocument(myDocument);
      }
    });
    //we put the badges category at the end of all categories
    if(isUpdate)document.getElementById('TabsContainer').appendChild(document.getElementById('badgesTab'));
  }
  
  //function to build a document inside its correct container
  function buildDocument(myDocument){
    var documentUrl = myDocument.url != "" ? myDocument.url : "javascript:;"; 
    var documentRelatedWebsite = myDocument.relatedWebsite != "" ? myDocument.relatedWebsite : "javascript:;";
    var hiddenUrl = myDocument.url == "" ? 'hidden="true"' : "";
    var hiddenRelatedWebsite = myDocument.relatedWebsite == "" ? 'hidden="true"' : "";
    var htmlContent = '<div class="documentBlock col-md-12">' +
                        '<div class="documentContent col-md-12">' +
                          '<input id="Visibility'+ myDocument.id +'" documentID="'+ myDocument.id +'" class="visibilityCheckBox documentVisibility" type="checkbox"/>' +
                          '<label for="Visibility' + myDocument.id + '"></label>' +
                          '<div class="removeButton" documentID="'+ myDocument.id +'" onclick="removeDocument(this)"></div>' +
                          '<input id="Edition'+ myDocument.id +'" class="editionCheckBox" type="checkbox"/>' +
                          '<label onclick="editDocument(this)" documentID="'+ myDocument.id +'"></label>' +
                          '<p class="documentTitle" id="title'+ myDocument.id +'">'+ myDocument.title +'</p>' + 
                          '<p class="documentDescription" id="description'+ myDocument.id +'">' + myDocument.description + '</p>' +
                          '<a href="'+ documentUrl +'" id="url'+ myDocument.id +'" target="_blank" '+hiddenUrl+'> Lien du document</br></a>' +
                          '<p id="editUrlLabel'+ myDocument.id +'" hidden="true" style="margin-bottom:5px;">Url du document :</p>' +
                          '<p id="editUrl'+ myDocument.id +'" hidden="true" style="margin-top:5px;">'+ myDocument.url +'</p>' +
                          '<a href="'+ documentRelatedWebsite +'" id="relatedWebsite'+ myDocument.id +'" target="_blank" '+hiddenRelatedWebsite+'> Site web associé</a>' +
                          '<p id="editRelatedWebsiteLabel'+ myDocument.id +'" hidden="true" style="margin-bottom:5px;">Site web associé :</p>' +
                          '<p id="editRelatedWebsite'+ myDocument.id +'" hidden="true" style="margin-top:5px;">'+ myDocument.relatedWebsite +'</p>' +
                          '<p class="documentDate">Réalisé le : <span id="date'+ myDocument.id +'" onkeypress="return (this.innerHTML.length < 10)">'+ myDocument.creationDate +'</span></p>' +
                          '<div class="alert alert-danger" hidden="true" id="alert'+myDocument.id+'"></div>' +
                        '</div>' +
                      '</div>';
    document.getElementById(myDocument.category.replace(" ", "_")).innerHTML += htmlContent;
  }
  
  function removeDocument(element){
    if(confirm("Voulez-vouz vraiment supprimer ce document? Cette action est irreversible.")){
      var documentIDtoRemove = element.getAttribute("documentID");
      
      var xmlHttpRemoveDocument = new XMLHttpRequest();
      xmlHttpRemoveDocument.open( "GET", "deletePortfolioDocument/"+documentIDtoRemove, false ); // false for synchronous request
      xmlHttpRemoveDocument.send( null );
      
      var childToRemove = element.parentNode.parentNode;
      var parent = childToRemove.parentNode;
      parent.removeChild(childToRemove);
      if(!parent.hasChildNodes()){ //if this category is now empty, we remove it
        var categoryToRemove = parent.parentNode;
        categoryToRemove.parentNode.removeChild(categoryToRemove);
      }
      documentsAlreadyBuilt[documentIDtoRemove] = false;
      
      init(false, true, false);
    }
  }
  
  function editDocument(labelElement){
    var documentID = labelElement.getAttribute("documentID");
    var wasEditingMode = document.getElementById("Edition"+documentID).checked;
    //if another document is still in editing mode, we can not edit this one until the other document edition is finished
    if(!wasEditingMode && isADocumentInEditingMode) alert("Un autre document est déjà en cours d'édition. Veuillez le terminer avant d'en éditer un autre. Merci.");
    //document elements
    var titleElement = document.getElementById("title"+documentID);
    var descriptionElement = document.getElementById("description"+documentID);
    var dateElement = document.getElementById("date"+documentID);
    var urlLink = document.getElementById("url"+documentID);
    var relatedWebsiteLink = document.getElementById("relatedWebsite"+documentID);
    var urlElement = document.getElementById("editUrl"+documentID);
    var urlElementLabel = document.getElementById("editUrlLabel"+documentID);
    var relatedWebsiteElement = document.getElementById("editRelatedWebsite"+documentID);
    var relatedWebsiteElementLabel = document.getElementById("editRelatedWebsiteLabel"+documentID);
    var alertElement = document.getElementById("alert"+documentID);
    
    if(!wasEditingMode && !isADocumentInEditingMode){//we enter in the editing mode only if no other elements are in the editing mode
      isADocumentInEditingMode = true; // to avoid multiple element editings
      // we hide link elements and display their equivalent <p>
      urlLink.setAttribute("hidden", true);
      relatedWebsiteLink.setAttribute("hidden", true);
      urlElement.removeAttribute("hidden");
      relatedWebsiteElement.removeAttribute("hidden");
      urlElementLabel.removeAttribute("hidden");
      relatedWebsiteElementLabel.removeAttribute("hidden");
      
      //we put all elements on editable mode
      titleElement.setAttribute("contenteditable", true);
      descriptionElement.setAttribute("contenteditable", true);
      dateElement.setAttribute("contenteditable", true);
      urlElement.setAttribute("contenteditable", true);
      relatedWebsiteElement.setAttribute("contenteditable", true);
      
      document.getElementById("Edition"+documentID).checked = true;
      
    }else{ //we leave the editing mode   
      //check data entered
      alertElement.setAttribute("hidden", true);
      var dateRegex = /^(0[1-9]|[12][0-9]|3[01])[/](0[1-9]|1[012])[/]\d{4}$/;
      var urlRegex = /(http(s)?:\/\/.)(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/;
      //We need to replace <br> because that will be here by default in an empty p
      if(urlElement.innerHTML == "</br>" || urlElement.innerHTML == "<br>")  urlElement.innerHTML = "";
      if(relatedWebsiteElement.innerHTML == "</br>" || relatedWebsiteElement.innerHTML == "<br>")  relatedWebsiteElement.innerHTML = "";
      if(titleElement.innerHTML == "</br>" || titleElement.innerHTML == "<br>")  titleElement.innerHTML = "";
      if(descriptionElement.innerHTML == "</br>" || descriptionElement.innerHTML == "<br>")  descriptionElement.innerHTML = "";
      if(dateElement.innerHTML == "</br>" || dateElement.innerHTML == "<br>")  dateElement.innerHTML = "";
      //conditions checking
      if(titleElement.innerHTML == ""){
        alertElement.innerHTML = "Veuillez entrer un titre.";
        alertElement.removeAttribute("hidden");
        return;
      }else if(descriptionElement.innerHTML == ""){
        alertElement.innerHTML = "Veuillez entrer une description.";
        alertElement.removeAttribute("hidden");
        return;
      }else if(dateElement.innerHTML == "" || !dateElement.innerHTML.match(dateRegex)){
        alertElement.innerHTML = "Veuillez entrer une date correcte (format JJ/MM/AAAA).";
        alertElement.removeAttribute("hidden");
        return;
      }else if(urlElement.innerHTML != "" && !urlElement.innerHTML.match(urlRegex)){
        alertElement.innerHTML = 'L\'adresse URL du document est incorrecte (peut être avez-vous oublier "http://" ou "https://" ?)';
        alertElement.removeAttribute("hidden");
        return;
      }else if(relatedWebsiteElement.innerHTML != "" && !relatedWebsiteElement.innerHTML.match(urlRegex)){
        alertElement.innerHTML = 'L\'adresse URL du site web associé est incorrecte (peut être avez-vous oublier "http://" ou "https://" ?)';
        alertElement.removeAttribute("hidden");
        return;
      }
      
      // we display link elements and hide their equivalent <p>
      urlElement.setAttribute("hidden", true);
      relatedWebsiteElement.setAttribute("hidden", true);
      urlElementLabel.setAttribute("hidden", true);
      relatedWebsiteElementLabel.setAttribute("hidden", true);
      
      //we remove all editable modes
      titleElement.removeAttribute("contenteditable");
      descriptionElement.removeAttribute("contenteditable");
      dateElement.removeAttribute("contenteditable");
      urlElement.removeAttribute("contenteditable");
      relatedWebsiteElement.removeAttribute("contenteditable");
      
      //update links href
      //<a> with href="" is not valid so we use href="javascript:;" to know if it's empty or not
      urlLink.href = urlElement.innerHTML != "" ? urlElement.innerHTML : "javascript:;";
      relatedWebsiteLink.href = relatedWebsiteElement.innerHTML != "" ? relatedWebsiteElement.innerHTML : "javascript:;";
      if(urlLink.href == "javascript:;") urlLink.setAttribute("hidden", true);
      if(relatedWebsiteLink.href == "javascript:;") relatedWebsiteLink.setAttribute("hidden", true);
      if(urlLink.href != "javascript:;") urlLink.removeAttribute("hidden");
      if(relatedWebsiteLink.href != "javascript:;") relatedWebsiteLink.removeAttribute("hidden");
      
      //element to send
      var dataToUpdate = {
        "title" : titleElement.innerHTML,
        "url" : urlElement.innerHTML,
        "relatedWebsite" : relatedWebsiteElement.innerHTML,
        "creationDate" : dateElement.innerHTML,
        "description" : descriptionElement.innerHTML
      };
      console.log(dataToUpdate)
      var xmlHttpUpdateDocument = new XMLHttpRequest();
      xmlHttpUpdateDocument.open( "PUT", "updatePortfolioDocument/"+documentID, false ); // false for synchronous request
      xmlHttpUpdateDocument.setRequestHeader("Content-type", "application/json");
      xmlHttpUpdateDocument.send( JSON.stringify(dataToUpdate) );
      
      document.getElementById("Edition"+documentID).checked = false;
      isADocumentInEditingMode = false; //to allow an other element editing
      
    }
  }
  
  
  /*************************/
  /** DoYouBuzz functions **/
  /*************************/
  
  //function to sync documents with DoYouBuzz
  function syncDYBDocuments(){
    var xmlHttpSyncDYB = new XMLHttpRequest();
    xmlHttpSyncDYB.open( "GET", "syncDYBDocuments", false ); // false for synchronous request
    xmlHttpSyncDYB.send();
    var data = JSON.parse(xmlHttpSyncDYB.responseText);
    console.log(data);
  }