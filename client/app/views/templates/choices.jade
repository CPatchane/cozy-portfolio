//-Bootstrap links and main style
script( src='//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js' )
script( src='//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js' )
link(href="//maxcdn.bootstrapcdn.com/bootswatch/3.3.0/flatly/bootstrap.min.css", rel="stylesheet")
style
  include main.css
  
div.container
  div.col-md-2.leftMenu
    div.sidebar-nav
      div.navbar.navbar-default(role='navigation')
        div.navbar-header
          button.navbar-toggle(type='button', data-toggle='collapse', data-target = '.sidebar-navbar-collapse')
            span.sr-only Toggle navigation
            span.icon-bar
            span.icon-bar
            span.icon-bar
          span.visible-xs.navbar-brand Menu
        div.navbar-collapse.collapse.sidebar-navbar-collapse
          ul.nav.navbar-nav
            li
              a(href='#') Mon profil
            li
              a(href='#portfolio') Vue de mon Portfolio
            li.active
              a(href='#choices') Mes choix
            li
              a(href='#accountSettings') Paramètres
  div.col-md-10.choicesContainer#choicesContainer
    div.row#TabsContainer
      //- This div will contain all category tabs dynamically
      div.row.text-center
        h1.col-md-12 Mes choix
      div.row.tab
        a.tabTitle.col-md-12(onclick="chooseCategory(this);") Aperçu
        div.docsContainer.col-md-12
      div.row.tab
        a.tabTitle.col-md-12(onclick="chooseCategory(this);") Images
        div.docsContainer.col-md-12
      div.row.tab
        a.tabTitle.col-md-12(onclick="chooseCategory(this);") Vidéos
        div.docsContainer.col-md-12
      div.row.tab
        a.tabTitle.col-md-12(onclick="chooseCategory(this);") Audios
        div.docsContainer.col-md-12
      div.row.tab
        a.tabTitle.col-md-12(onclick="chooseCategory(this)") Projets
        div.docsContainer.col-md-12
      div.row.tab
        a.tabTitle.col-md-12(onclick="chooseCategory(this);") Autres
        div.docsContainer.col-md-12
    div.row#submitPart
      div.col-md-12.submitButton.text-center
        button.btn.btn-primary#submitChanges(onclick="submitChanges()") Valider les changements
        button.btn.btn-warning#syncDYBDocumentsButton(type="button", onclick="syncDYBDocuments()") Synchroniser mes documents DoYouBuzz
        div.alert.alert-success#savedMessage(hidden="true")
        div.alert.alert-danger#ErrorMessage(hidden="true")
    div.row#addDocumentPart
      div.row.text-left
        h3.col-md-12 Ajouter un document
      div.documentBlock.col-md-6#addDocumentBlock(style="display:none")
        div.documentContent.col-md-12#addDocumentContent
          div.row
            label Titre<span class="mandatoryStar">*</span> :
            input#title(type="text", placeholder="Titre du document" name="title")
          div.row
            label URL :
            input#url(type="text", placeholder="Url de votre document" name="url")
          div.row
            label Site web associé :
            input#relatedWebsite(type="text", placeholder="www.mywebsite.fr" name="relatedWebsite")
          div.row
            label Catégorie<span class="mandatoryStar">*</span> :
            input#category(type="text", placeholder="Sa catégorie" name="category")
          div.row
            label Date de réalisation<span class="mandatoryStar">*</span> :
            input#creationDate(type="text", placeholder="jj/mm/aaaa" name="creationDate")
          div.row
            label Description<span class="mandatoryStar">*</span> :
            textarea#description(style="resize:none;width:60%;height:100px;", placeholder="Description du document..." name="description")
          div.row.text-center
            button.btn.btn-primary#addDocumentButton(onclick="addDocument()") Ajouter ce document
            button.btn.btn-secondary#cancelButton(onclick="showAddDocumentForm(false)") Cacher
          div.row.alert.alert-danger#ErrorMessageAddDocument(style="margin-top:5px;", hidden="true")
      div.documentBlock.col-md-3#placeHolderAddDocumentBlock(onclick="showAddDocumentForm(true)")
        div.documentContent.col-md-12#placeHolderAddDocumentContent
          button#addButton +
        
      
script(type="text/javascript").
  var groups = {};
  var documents = [];
  init(true,false,false); //first running so this is not an update
  
  /***********************/
  /** General functions **/
  /***********************/
  
  //functon run on page loading
  function init(isFirstRunning, isDocumentsUpdate, isBadgeUpdate){
    //get all documents from database and build them on the page
    if(isFirstRunning || isDocumentsUpdate)getAndBuildDocuments(isDocumentsUpdate);
    
    //get all badges from database and build them on page
    if(isFirstRunning || isBadgeUpdate)getAndBuildBadges(isBadgeUpdate);
  }
  
  //functon for choising category behavior
  function chooseCategory(element){
    if(element.parentNode.className == "tab choiceCategory"){
      element.parentNode.className = "tab";
      return;
    }
    var categoriesDIV = document.getElementById("choicesContainer").getElementsByClassName("tab");
    for(var i in categoriesDIV){
      categoriesDIV[i].className = "tab";
    }
    element.parentNode.className = "tab choiceCategory";
  }
  
  //function to submit user changes
  function submitChanges(){
    
    //submit badges visibilities
    var badgesInputs = document.getElementsByClassName("badgeVisibility");
    var badgesToSubmit = {};
    for(var i=0; i<badgesInputs.length; i++){
      badgesToSubmit[badgesInputs[i].getAttribute("badge")] = badgesInputs[i].checked;
    }
    var xmlHttpUpdate = new XMLHttpRequest();
    xmlHttpUpdate.open( "PUT", "updateBadgesGroup", false ); // false for synchronous request
    xmlHttpUpdate.setRequestHeader("Content-type", "application/json");
    xmlHttpUpdate.send( JSON.stringify(badgesToSubmit) );
  }
  
  /**********************/
  /** Badges functions **/
  /**********************/
  
  //function to get all badges from database and build them on the html page
  function getAndBuildBadges(isUpdate){
    //get all badges from database and build them on page
    var xmlHttpGroups = new XMLHttpRequest();
    xmlHttpGroups.open( "GET", "getBadgesGroup", false ); // false for synchronous request
    xmlHttpGroups.send( null );
    groups = JSON.parse(xmlHttpGroups.responseText);
    //console.log(groups);
    
    if(groups.length == 0) return; //if no badges returned, we stop here
    if(isUpdate){
      document.getElementById("badgesTabContent").innerHTML = "";
    }else{
      var badgesTabHTML = '<div class="row tab" id="badgesTab">' +
                          '<a class="tabTitle col-md-12" onclick="chooseCategory(this);">Badges</a>' +
                          '<div class="docsContainer col-md-12" id="badgesTabContent"></div>' +
                          '<button class="btn btn-primary" id="syncOBbutton" onclick="syncObenBadgesBackPack()">Récupérer de mon BackPack (OpenBadges)</button>' +
                      '</div>';
      document.getElementById("TabsContainer").innerHTML += badgesTabHTML;
    }
    var badges = {};
    groups.forEach(function(group, group_index, array){
      badges = group.badges;
      badges.forEach(function(badge, badge_index, array){
        buildBadge(badge.name, badge.imageUrl, badge.issuerName, badge.issuerUrl, badge.issuedOn, badge.description, badge.criteria, badge.visible, group_index+"_"+badge_index); 
      });
    });
  }
  
    
  //function to build each badge on page
  function buildBadge(badgeName, imageUrl, issuerName, issuerUrl, issueDate, description, hostedUrl, visibility, index){
    //id for the badge visibility input
    var badgeId = "badge_"+index;
    //get visibility parameter
    var checked = visibility ? "checked" : "";
    //badge html building
    var container = 
        '<div class="badgeBlock col-md-6">' +
          '<div class="badgeContent col-md-12">' +
            '<img class="badgeImage" src="' + imageUrl + '"/>'+
            '<div class="badgeDetails">' +
              '<input id="'+ badgeId +'" badge="' + badgeName + '" class="visibilityCheckBox badgeVisibility" type="checkbox" name="' + badgeId + '" '+ checked +' />' +
              '<label for="' + badgeId + '"></label>' +
              '<p class="badgeIssuer"> <span class="badgeName">' + badgeName + '</span>' +
                ', délivré par <a href="' + issuerUrl + '">' + issuerName + '</a>, le ' + issueDate + '' +
              '</p>' +
              '<p class="badgeDescription">' + description + '</p>' +
              '<a class="badgeLink" target="_blank" href="' + hostedUrl + '">Voir sur le site d\'origine ></a>' +
            '</div>' +
          '</div>' +
        '</div>';
      
      //add to badges tab
      document.getElementById("badgesTabContent").innerHTML += container;
  }
  
  
  //function to sync badges with OpenBadges BackPack
  function syncObenBadgesBackPack(){
    if(confirm("Attention : les paramètres de visibilité de vos badges seront désactivés, il vous faudra les rechoisir, voulez-vous continuez?")){
        var xmlHttpSync = new XMLHttpRequest();
        xmlHttpSync.open( "GET", "syncBadgesGroup", true ); // true for asynchronous request
        xmlHttpSync.onreadystatechange = function(){
          if (xmlHttpSync.readyState == 4 && xmlHttpSync.status == 200) {
            init(false, false, true); //badges updates but not document update
          }
        }
        xmlHttpSync.send();
    }
  }
  
  
  /*************************/
  /** Documents functions **/
  /*************************/
  
  //add a new document from the form
  function addDocument(){
    document.getElementById("ErrorMessageAddDocument").setAttribute("hidden", true);
    var title = document.getElementById("title");
    var url = document.getElementById("url");
    var relatedWebsite = document.getElementById("relatedWebsite");
    var category = document.getElementById("category");
    var creationDate = document.getElementById("creationDate");
    var description = document.getElementById("description");
    var errorMessage = document.getElementById("ErrorMessageAddDocument");
    var dateReg = /^(0[1-9]|[12][0-9]|3[01])[/](0[1-9]|1[012])[/]\d{4}$/
    //check all mandatory inputs
    if(title.value == ""){
      errorMessage.innerHTML = "Veuillez ajouter un titre.";
      document.getElementById("ErrorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(category.value == ""){
      errorMessage.innerHTML = "Veuillez assigner une catégorie.";
      document.getElementById("ErrorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(creationDate.value == "" || !creationDate.value.match(dateReg)){
      errorMessage.innerHTML = "La date est manquante ou incorrecte (format : JJ/MM/AAAA).";
      document.getElementById("ErrorMessageAddDocument").removeAttribute("hidden");
      return;
    }else if(description.value == ""){
      errorMessage.innerHTML = "Veuillez ajouter une description.";
      document.getElementById("ErrorMessageAddDocument").removeAttribute("hidden");
      return;
    }
    var dataToUpdate = {
      "title" : title.value,
      "url" : url.value,
      "relatedWebsite" : relatedWebsite.value,
      "category" : category.value,
      "creationDate" : creationDate.value,
      "description" : description.value
    };
    //sent to server to be added
    var xmlHttpAddDocument = new XMLHttpRequest();
    xmlHttpAddDocument.open( "POST", "addPortfolioDocument", true );
    xmlHttpAddDocument.setRequestHeader("Content-type", "application/json");
    xmlHttpAddDocument.onreadystatechange = function(){
          if (xmlHttpAddDocument.readyState == 4 && xmlHttpAddDocument.status == 200) {
            //reset the form
            title.value = "";
            url.value = "";
            relatedWebsite.value = "";
            category.value = "";
            creationDate.value = "";
            description.value = "";
            showAddDocumentForm(false);
            init(false, true, false);//documents update
          }
        }
    xmlHttpAddDocument.send(JSON.stringify(dataToUpdate));
  }
  
    
  function showAddDocumentForm(showFormAction){
    if(showFormAction){
      document.getElementById("placeHolderAddDocumentBlock").setAttribute("style", "display:none");
      document.getElementById("addDocumentBlock").removeAttribute("style");
      window.scrollTo(0,document.body.scrollHeight);
    }else{
      document.getElementById("addDocumentBlock").setAttribute("style", "display:none");
      document.getElementById("placeHolderAddDocumentBlock").removeAttribute("style");
      window.scrollTo(0);
    }
  }
  
  //get all documents from database and build them on the page
  function getAndBuildDocuments(isUpdate){
    var xmlHttpDocuments = new XMLHttpRequest();
    xmlHttpDocuments.open( "GET", "getPortfolioDocuments", false ); // false for synchronous request
    xmlHttpDocuments.send( null );
    documents = JSON.parse(xmlHttpDocuments.responseText);
    console.log(documents);
    
    if(documents.length == 0) return;
  }
  
  
  /*************************/
  /** DoYouBuzz functions **/
  /*************************/
  
  //function to sync documents with DoYouBuzz
  function syncDYBDocuments(){
    var xmlHttpSyncDYB = new XMLHttpRequest();
    xmlHttpSyncDYB.open( "GET", "syncDYBDocuments", false ); // false for synchronous request
    xmlHttpSyncDYB.send();
    var data = JSON.parse(xmlHttpSyncDYB.responseText);
    console.log(data);
  }